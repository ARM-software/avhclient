name: Release
on:
  release:
    types: [published]
  push:
    tags: ['v*']

jobs:
  update:
    name: Update release branches
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
        if: ${{ github.event_name == 'release' }}
        with:
          fetch-depth: 0
      - if: ${{ github.event_name == 'release' }}
        run: |
          minor=$(cut -d. -f1-2 <<< "${{ github.ref_name }}")
          major=$(cut -d. -f1   <<< "${{ github.ref_name }}")
          if (! git rev-parse --verify origin/${minor}) || (git merge-base --is-ancestor origin/${minor} ${{ github.ref_name }}); then
            git push origin ${{ github.ref_name }}^{commit}:refs/heads/${minor}
          fi
          if (! git rev-parse --verify origin/${major}) || (git merge-base --is-ancestor origin/${major} ${{ github.ref_name }}); then
            git push origin ${{ github.ref_name }}^{commit}:refs/heads/${major}
          fi
          if (! git rev-parse --verify origin/latest) || (git merge-base --is-ancestor origin/latest ${{ github.ref_name }}); then
            git push origin ${{ github.ref_name }}^{commit}:refs/heads/latest
          fi

  publish:
    name: Publish to PyPI
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install setup dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools twine wheel

      - name: Build distribution
        run: |
          python setup.py sdist bdist_wheel
          twine check dist/*

      - name: Upload to PyPI
        if: ${{ github.event_name == 'release' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Upload to Test PyPI
        if: ${{ github.event_name == 'push' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true

  docker:
    name: Build Docker image
    needs: update
    runs-on: 'ubuntu-latest'
    timeout-minutes: 15
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Retrieve additional git refs
        if: ${{ github.event_name == 'release' }}
        id: git
        run: |
          refs=$(git show-ref |\
                 grep $(git rev-parse ${{ github.ref_name }}^{}) |\
                 egrep 'refs/remotes/origin/(v|latest)' |\
                 cut -d\  -f2 |\
                 sed 's/refs\/remotes\/origin\//ghcr.io\/arm-software\/avhclient:/')
          refs="${refs//'%'/'%25'}"
          refs="${refs//$'\n'/'%0A'}"
          refs="${refs//$'\r'/'%0D'}"
          echo "::set-output name=refs::${refs}"

      - name: docker build
        if: ${{ github.event_name == 'push' }}
        uses: docker/build-push-action@v2
        with:
          context: docker
          build-args: "GIT_VERSION=${{ github.ref_name }}"
          push: true
          tags: ghcr.io/arm-software/avhclient:${{ github.ref_name }}
          labels: |
            org.opencontainers.image.version="${{ github.ref_name }}"
            org.opencontainers.image.revision="${{ github.sha }}"

      - name: docker push
        if: ${{ github.event_name == 'release' }}
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ghcr.io/arm-software/avhclient:${{ github.ref_name }}
          dst: ${{ steps.git.outputs.refs }}

      - name: Inspect image
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin v0.51.0
          syft --scope all-layers ghcr.io/arm-software/avhclient:${{ github.ref_name }} --file docker-content.txt
          syft --scope all-layers ghcr.io/arm-software/avhclient:${{ github.ref_name }} --output spdx-json --file docker-content.json

      - uses: actions/upload-artifact@v3
        with:
          name: docker-content
          path: |
            docker-content.json
            docker-content.txt

      - name: Attach Docker image license information
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file: docker-content.*
          file_glob: true
